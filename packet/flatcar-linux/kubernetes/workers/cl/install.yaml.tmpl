---
systemd:
  units:
    - name: installer.service
      enable: true
      contents: |
        [Unit]
        StartLimitBurst=5
        StartLimitIntervalSec=3600s
        Requires=network-online.target
        After=network-online.target
        [Service]
        Type=simple
        Restart=always
        RestartSec=60
        ExecStart=/opt/installer
        [Install]
        WantedBy=multi-user.target
    # Avoid using the standard SSH port so terraform apply cannot SSH until
    # post-install. But admins may SSH to debug disk install problems.
    # After install, sshd will use port 22 and users/terraform can connect.
    - name: sshd.socket
      dropins:
        - name: 10-sshd-port.conf
          contents: |
            [Socket]
            ListenStream=
            ListenStream=2222
storage:
  files:
    - path: /opt/postinstall-ignition.json
      filesystem: root
      mode: 0500
      contents:
        inline: |
          ${postinstall_ignition}
    - path: /opt/installer
      filesystem: root
      mode: 0500
      contents:
        inline: |
          #!/bin/bash -ex

          # A comma-separated list of major device numbers. Modify to control which device types
          # are considered for OS installation and data RAID.
          # https://www.kernel.org/doc/Documentation/admin-guide/devices.txt
          major_numbers="8,259"

          # This function returns the path to the block device which represents the smallest disk
          # attached to the system. The output can be passed to the flatcar-install script.
          function select_install_disk() {
            local major_numbers="$1"

            local disk=$(lsblk -lnpd -I "$${major_numbers}" -x size \
              | head -1 \
              | awk '{print $1}'
            )

            echo "$${disk}"
          }

          function create_data_raid() {
            # Ignore the disk on which Linux is installed when selecting disks for RAID.
            local osdisk="$1"
            local major_numbers="$2"
            # for hdd value is 1 and for ssd value is 0
            local disk_type="$3"
            # RAID device path on disk
            local device_path="$4"
            local setup_fs_on_raid="$5"

            if [ $$disk_type -lt 0 ]; then
              local d=$(lsblk -lnpd -I "$${major_numbers}" -x size)
            else
              local d=$(lsblk -lnpd -o name,rota -I "$${major_numbers}" -x size \
                | grep " $${disk_type}"
              )
            fi
            local disks=$(echo "$$d" \
              | grep -vE "^$${osdisk} " \
              | awk '{x=$1 " " x;} END{print x}'
            )
            local count=$(echo "$$disks" | wc -w)

            # Exit if we don't have any disks to create an array
            [ $$count -lt 1 ] && return 0

            # Create, format and mount array.
            local extra_opts=""
            if [ $$count -lt 2 ]; then
              # Force array creation even with one disk
              extra_opts="--force"
            fi

            # if the device_path is "/dev/md/node-local-hdd-storage" then array
            # name would be "node-local-hdd-storage"
            array_name=$(basename "$${device_path}")
            mdadm --create "$${device_path}" --homehost=any $$extra_opts --verbose --name="$${array_name}" --level=0 --raid-devices="$${count}" $${disks}
            cat /proc/mdstat
            if [ "$${setup_fs_on_raid}" = true ]; then
              mkfs.ext4 "$${device_path}"
            fi
          }

          os_disk="$(select_install_disk $${major_numbers})"

          # Create a RAID 0 from extra disks to be used for persistent container storage.
          if [ ${setup_raid} = true ]; then
            create_data_raid "$${os_disk}" "$${major_numbers}" -1 /dev/md/node-local-storage true
          else
            if [ ${setup_raid_hdd} = true ]; then
              create_data_raid "$${os_disk}" "$${major_numbers}" 1 /dev/md/node-local-hdd-storage true
            fi
            if [ ${setup_raid_ssd} = true ]; then
              create_data_raid "$${os_disk}" "$${major_numbers}" 0 /dev/md/node-local-ssd-storage ${setup_raid_ssd_fs}
            fi
          fi

          flatcar-install \
            -d "$${os_disk}" \
            -C "${os_channel}" \
            -V "${os_version}" \
            -o "${flatcar_linux_oem}" \
            -i /opt/postinstall-ignition.json
          udevadm settle
          systemctl reboot
passwd:
  users:
    - name: core
      ssh_authorized_keys: ${ssh_keys}
